@page "/"
@using System.Drawing;
@using BlazorPro.BlazorSize;
@using Majorsoft.Blazor.Components.Core.Extensions;
@using Majorsoft.Blazor.Components.Maps
@using Majorsoft.Blazor.Components.Maps.Google
@inject IJSRuntime _jsRuntime
@inject IResizeListener _resizeListener
@using System.Collections.ObjectModel;
@using Toolbelt.Blazor.Splitter

<PageTitle>Assets</PageTitle>

<SplitContainer Id="splitter" Style="width: 100%; max-width: 100%; height: 100%; max-height: 100%; background-color: gray;"
	@bind-FirstPaneSize="_paneSize"
	Orientation="SplitterOrientation.Horizontal">
	<FirstPane>
		<h1 style="color: white">Assets</h1>
	</FirstPane>
	<SecondPane>
		<div class="map-container">
			<GoogleMap
				@bind-Center="_jsMapCenter" @bind-Center:event="OnMapCenterChanged"
				@bind-Zoom="_jsMapZoomLevel" @bind-Zoom:event="OnMapZoomLevelChanged"
				Markers="@_markers"
				OnMapInitialized="@(() => OnMapInitialized())"
				ApiKey="@_googleMapsApiKey"
				StreetViewControl="false"
				MapTypeControl="false"/>
		</div>
	</SecondPane>
</SplitContainer>

@code {
	protected override void OnInitialized()
	{
		_timer.Interval = 5000;
		_timer.Elapsed += (_, _) => {
			var markers = new GoogleMapMarker[_markers.Count];
			_markers.CopyTo(markers, 0);
			_markers.Clear();

			foreach (var marker in markers)
			{
				marker.Position = new GeolocationCoordinate(
					marker.Position.Latitude + (Random.Shared.NextDouble() * 2 - 1) * 0.001,
					marker.Position.Longitude + (Random.Shared.NextDouble() * 2 - 1) * 0.001);
				_markers.Add(marker);
			}
		};
		_timer.Enabled = true;
	}

	private void OnMapInitialized()
	{
		for (int i = 0; i < 20; ++i)
		{
			var coordinates = new GeolocationCoordinate(
				52.0907 + (Random.Shared.NextDouble() * 2 - 1) * 0.2,
				5.1214 + (Random.Shared.NextDouble() * 2 - 1) * 0.2);

			_markers.Add(new GoogleMapMarker(coordinates)
			{
				Draggable = false,
				Clickable = false,
			});
		}
		StateHasChanged();
	}

	private readonly static string _googleMapsApiKey = "AIzaSyDGiDFTTOkFF8e6qk58Gj7IaWHdisGrrr4";

	private readonly ObservableRangeCollection<GoogleMapMarker> _markers = new();
	private readonly System.Timers.Timer _timer = new();

	private int _paneSize = 240;
	private GeolocationData _jsMapCenter = new GeolocationData("Utrecht");
	private byte _jsMapZoomLevel = 10;
}